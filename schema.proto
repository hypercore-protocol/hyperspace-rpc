syntax = "proto2";

// General Structs
message Peer {
  required bytes remotePublicKey = 1;
  required string remoteAddress = 2;
  required string type = 3;
}

// Hyperspace Methods
message HyperspaceStatusResponse {
  required string apiVersion = 1;
  optional bool holepunchable = 2;
  optional string remoteAddress = 3;
}

// Corestore Methods

message OpenRequest {
  required uint32 id = 1;
  optional bytes key = 2;
  optional string name = 3;
  optional bool weak = 4;
}

message OpenResponse {
  required bytes key = 1;
  required uint64 length = 2;
  required uint64 byteLength = 3;
  required bool writable = 4;
  repeated Peer peers = 5;
}

// Corestore Events

message FeedEvent {
  required bytes key = 1;
}

// Networking Methods

message OpenNetworkResponse {
  required bytes publicKey = 1;
  repeated Peer peers = 2;
}

message NetworkStatus {
  required bytes discoveryKey = 1;
  optional bool announce = 2;
  optional bool lookup = 3;
  optional bool remember = 4;
}

message ConfigureNetworkRequest {
  required NetworkStatus configuration = 1;
  optional bool flush = 2;
  optional bytes copyFrom = 3;
  optional bool overwrite = 4 [default = true];
}

message NetworkStatusRequest {
  required bytes discoveryKey = 1;
}

message NetworkStatusResponse {
  optional NetworkStatus status = 1;
}

message AllNetworkStatusesResponse {
  repeated NetworkStatus statuses = 1;
}

message RegisterNetworkExtensionRequest {
  required uint64 resourceId = 1;
  required string name = 3;
}

message NetworkExtensionMessage {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional bytes remotePublicKey = 3;
  required bytes data = 4;
}

// Hypercore Methods

message CloseRequest {
  required uint32 id = 1;
}

message GetRequest {
  required uint32 id = 1;
  required uint64 seq = 2;
  required uint64 resourceId = 3;
  optional bool wait = 4 [default = true];
  optional bool ifAvailable = 5 [default = true];
  optional uint64 onWaitId = 6;
}
message GetResponse {
  optional bytes block = 1;
}

message AppendRequest {
  required uint32 id = 1;
  repeated bytes blocks = 2;
}
message AppendResponse {
  required uint64 length = 1;
  required uint64 byteLength = 2;
  required uint64 seq = 3;
}

message UpdateRequest {
  required uint32 id = 1;
  optional uint64 minLength = 2;
  optional bool ifAvailable = 3 [default = true];
  optional bool hash = 4 [default = true];
}

message SeekRequest {
  required uint32 id = 1;
  required uint64 byteOffset = 2;
  optional uint64 start = 3;
  optional uint64 end = 4;
  optional bool wait = 5 [default = true];
  optional bool ifAvailable = 6 [default = true];
}
message SeekResponse {
  required uint64 seq = 1;
  required uint64 blockOffset = 2;
}

message HasRequest {
  required uint32 id = 1;
  required uint64 seq = 2;
}
message HasResponse {
  required bool has = 1;
}

message CancelRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

message DownloadRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional uint64 start = 3;
  optional uint64 end = 4;
  repeated uint64 blocks = 5;
  optional bool linear = 6;
}

message DownloadedRequest {
  required uint64 id = 1;
  optional uint64 start = 2;
  optional uint64 end = 3;
}

message DownloadedResponse {
  required uint64 bytes = 1;
}

message UndownloadRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

message LockRequest {
  required uint64 id = 1;
}


// Hypercore Events

message AppendEvent {
  required uint64 id = 1;
  required uint64 length = 2;
  required uint64 byteLength = 3;
}

message PeerEvent {
  required uint64 id = 1;
  required Peer peer = 2;
}

message CloseEvent {
  required uint64 id = 1;
}

message WaitEvent {
  required uint64 id = 1;
  required uint64 onWaitId = 2;
}

// Extension Methods

message RegisterExtensionRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  required string name = 3;
}

message UnregisterExtensionRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

message ExtensionMessage {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional bytes remotePublicKey = 3;
  required bytes data = 4;
}

// TODO: Before official release, tag these methods with explicit IDs.

service Hyperspace {
  option id = 1;

  // Methods
  rpc Status (Void) returns (HyperspaceStatusResponse) { option id = 1; }
}

service Corestore {
  option id = 2;

   // Methods
  rpc Open (OpenRequest) returns (OpenResponse) { option id = 1; }

  // Events
  rpc OnFeed (FeedEvent) returns (Void)  { option id = 2; }
}

service Hypercore {
  option id = 3;

   // Methods
  rpc Get (GetRequest) returns (GetResponse) { option id = 1; }
  rpc Append (AppendRequest) returns (AppendResponse) { option id = 2; }
  rpc Update (UpdateRequest) returns (Void) { option id = 3; }
  rpc Seek (SeekRequest) returns (SeekResponse) { option id = 4; }
  rpc Has (HasRequest) returns (HasResponse) { option id = 5; }
  rpc Cancel (CancelRequest) returns (Void) { option id = 6; }
  rpc Download (DownloadRequest) returns (Void) { option id = 7; }
  rpc Downloaded (DownloadedRequest) returns (DownloadedResponse) { option id = 8; }
  rpc Undownload (UndownloadRequest) returns (Void) { option id = 9; }
  rpc Close (CloseRequest) returns (Void) { option id = 10; }
  rpc RegisterExtension (RegisterExtensionRequest) returns (Void) { option id = 11; }
  rpc UnregisterExtension (UnregisterExtensionRequest) returns (Void) { option id = 12; }
  rpc SendExtension (ExtensionMessage) returns (Void) { option id = 13; }

  rpc AcquireLock (LockRequest) returns (Void) { option id = 14; }
  rpc ReleaseLock (LockRequest) returns (Void) { option id = 15; }

  // Events
  rpc OnAppend (AppendEvent) returns (Void) { option id = 16; }
  rpc OnClose (CloseEvent) returns (Void) { option id = 17; }
  rpc OnPeerOpen (PeerEvent) returns (Void) { option id = 18; }
  rpc OnPeerRemove (PeerEvent) returns (Void) { option id = 19; }
  rpc OnExtension (ExtensionMessage) returns (Void) { option id = 20; }
  rpc OnWait (WaitEvent) returns (Void) { option id = 21; }
}

service Network {
  option id = 4;

   // Methods
  rpc Open (Void) returns (OpenNetworkResponse) { option id = 1; }
  rpc Configure (ConfigureNetworkRequest) returns (NetworkStatusResponse) { option id = 2; }
  rpc Status (NetworkStatusRequest) returns (NetworkStatusResponse) { option id = 3; }
  rpc AllStatuses (Void) returns (AllNetworkStatusesResponse) { option id = 4; }
  rpc RegisterExtension (RegisterExtensionRequest) returns (Void) { option id = 5; }
  rpc UnregisterExtension (UnregisterExtensionRequest) returns (Void) { option id = 6; }
  rpc SendExtension (ExtensionMessage) returns (Void) { option id = 7; }

  // Events
  rpc OnPeerAdd (PeerEvent) returns (Void) { option id = 8; }
  rpc OnPeerRemove (PeerEvent) returns (Void) { option id = 9; }
  rpc OnExtension (ExtensionMessage) returns (Void) { option id = 10; }
}
